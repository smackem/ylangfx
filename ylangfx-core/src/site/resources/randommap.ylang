W := 320
H := 240

fn createRandomSeed(w, h) {
    out := image(w, h)
    for p in out.bounds {
        out[p] = rgb(random(0, 255))
    }
    return out
}

fn createIslandSeed(w, h) {
    out := image(w, h)
    center := w/2;h/2
    maxDistance := hypot(center)
    for p in out.bounds {
        ratio := hypot(p.x - center.x, p.y - center.y) / maxDistance
        out[p] = -rgb(random(0, 128) + random(0, max(1, ratio * 127)))
    }
    return out
}

fn smoothen(inp, radius) {
    G := gaussian(radius)
    out := image(inp.bounds)
    for p in out.bounds {
        out[p] = inp.convolve(p, G)
    }
    return out
}

fn restoreContrast(inp) {
    min := 255
    max := 0
    for p in inp.bounds {
        px := inp[p]
        min = min(min, px.r)
        max = max(max, px.r)
    }
    range := max - min
    log("min: ", min, " max: ", max, " range: ", range)
    out := image(inp.bounds)
    for p in inp.bounds {
        px := inp[p]
        ratio := (px.r - min) / range
        out[p] = rgb(ratio * 255)
    }
    return out
}

heightTable := [
    {
        lower: 0,
        upper: 100,
        color1: #000099,
        color2: #99ebff,
    },
    {
        lower: 100,
        upper: 120,
        color1: #eeeed3,
        color2: #ffff66,
    },
    {
        lower: 120,
        upper: 210,
        color1: #33cc00,
        color2: #206040,
    },
    {
        lower: 210,
        upper: 255,
        color1: #206040,
        color2: #f2f2f2,
    },
]

fn interpolate(color1, color2, ratio) {
    dr := color2.r - color1.r
    dg := color2.g - color1.g
    db := color2.b - color1.b
    return rgb(color1.r + dr * ratio, color1.g + dg * ratio, color1.b + db * ratio)
}

fn pickHeightColor(height) {
    for e in heightTable where e.lower <= height and height <= e.upper {
        range := e.upper - e.lower
        ratio := (height - e.lower) / range
        return interpolate(e.color1, e.color2, ratio)
    }
    return #ffffff@00
}

fn scaleAndColorize(inp) {
    log("scaleAndColorize")
    ratio := 2.5
    out := image(inp.bounds.width * ratio, inp.bounds.height * ratio)
    for p in out.bounds {
        height := inp[p.x / ratio; p.y / ratio].r
        out[p] = pickHeightColor(height)
    }
    return out
}

out := createIslandSeed(W, H)
for i in 0 .. 5 {
    out = smoothen(out, 20)
    out = restoreContrast(out)
}
out = scaleAndColorize(out.default(#ff0000))
return out